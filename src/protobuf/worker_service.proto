syntax = "proto3";
package protobuf;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Worker {
	//service to master
	rpc ShutDown (shutDownRequest) returns (shutDownResponse) {}
	rpc PEval (pEvalRequest) returns (pEvalResponse) {}
	rpc IncEval (incEvalRequest) returns (incEvalResponse) {}
	rpc Assemble (assembleRequest) returns (assembleResponse) {}
	//service to worker
	rpc SSSPSend (sSSPMessageRequest) returns (sSSPMessageResponse) {}
    rpc simSend (simMessageRequest) returns (simMessageResponse) {}

}

message shutDownRequest {
}
message shutDownResponse {
	int32 iterationNum = 1;
}

message pEvalRequest {
}

message workerCommunicationSize {
    int32 workerID = 1; //destination partition ID
    int32 communicationSize = 2; //size of message to send
}

message pEvalResponseBody {
    int32 iterationNum = 1;
    //duration time of partial SSSP loop
    double iterationSeconds = 2;
    //duration time of combine message
    double combineSeconds = 3;
    //number of updated boarders node pair
    int32 updatePairNum = 4;
    //number of destinations which message send to
    int32 dstPartitionNum = 5;
    //duration of a worker send to message to all other workers
    double allPeerSend = 6;
    //size of worker to worker communication pairs
    repeated workerCommunicationSize pairNum = 7;
}
message pEvalResponse {
	bool ok = 1;
	pEvalResponseBody body = 2;
}
message incEvalRequest {
}
message incEvalResponseBody {
    //duration time of aggregator
    double aggregatorSeconds = 1;
    int32 aggregatorOriSize = 2;
    int32 aggregatorReducedSize = 3;

    int32 iterationNum = 4;
    //duration time of partial SSSP loop
    double iterationSeconds = 5;
    //duration time of combine message
    double combineSeconds = 6;
    //number of updated boarders node pair
    int32 updatePairNum = 7;
    //number of destinations which message send to
    int32 dstPartitionNum = 8;
    //duration of a worker send to message to all other workers
    double allPeerSend = 9;
    //size of worker to worker communication pairs
    repeated workerCommunicationSize pairNum = 10;
}
message incEvalResponse {
	bool update = 1;
	incEvalResponseBody body = 2;
}
message assembleRequest {	
}
message assembleResponse {
	bool ok = 1;
}
message sSSPMessageRequest {
	repeated sSSPMessageStruct pair = 1;
}
message sSSPMessageStruct {
	int64 nodeID = 1;
	int64 distance = 2;
}
message sSSPMessageResponse {
}
message simMessageRequest {
    repeated simMessageStruct pair = 1;
}
message simMessageResponse {
}
message simMessageStruct {
    int64 patternId = 1;
    int64 dataId = 2;
}