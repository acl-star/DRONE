// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: worker_service.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShutDownRequest struct {
}

func (m *ShutDownRequest) Reset()                    { *m = ShutDownRequest{} }
func (m *ShutDownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutDownRequest) ProtoMessage()               {}
func (*ShutDownRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{0} }

type ShutDownResponse struct {
	IterationNum int32 `protobuf:"varint,1,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
}

func (m *ShutDownResponse) Reset()                    { *m = ShutDownResponse{} }
func (m *ShutDownResponse) String() string            { return proto.CompactTextString(m) }
func (*ShutDownResponse) ProtoMessage()               {}
func (*ShutDownResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{1} }

type PEvalRequest struct {
}

func (m *PEvalRequest) Reset()                    { *m = PEvalRequest{} }
func (m *PEvalRequest) String() string            { return proto.CompactTextString(m) }
func (*PEvalRequest) ProtoMessage()               {}
func (*PEvalRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{2} }

type WorkerCommunicationSize struct {
	WorkerID          int32 `protobuf:"varint,1,opt,name=workerID,proto3" json:"workerID,omitempty"`
	CommunicationSize int32 `protobuf:"varint,2,opt,name=communicationSize,proto3" json:"communicationSize,omitempty"`
}

func (m *WorkerCommunicationSize) Reset()         { *m = WorkerCommunicationSize{} }
func (m *WorkerCommunicationSize) String() string { return proto.CompactTextString(m) }
func (*WorkerCommunicationSize) ProtoMessage()    {}
func (*WorkerCommunicationSize) Descriptor() ([]byte, []int) {
	return fileDescriptorWorkerService, []int{3}
}

type PEvalResponseBody struct {
	IterationNum int32 `protobuf:"varint,1,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
	// duration time of partial SSSP loop
	IterationSeconds float64 `protobuf:"fixed64,2,opt,name=iterationSeconds,proto3" json:"iterationSeconds,omitempty"`
	// duration time of combine message
	CombineSeconds float64 `protobuf:"fixed64,3,opt,name=combineSeconds,proto3" json:"combineSeconds,omitempty"`
	// number of updated boarders node pair
	UpdatePairNum int32 `protobuf:"varint,4,opt,name=updatePairNum,proto3" json:"updatePairNum,omitempty"`
	// number of destinations which message send to
	DstPartitionNum int32 `protobuf:"varint,5,opt,name=dstPartitionNum,proto3" json:"dstPartitionNum,omitempty"`
	// duration of a worker send to message to all other workers
	AllPeerSend float64 `protobuf:"fixed64,6,opt,name=allPeerSend,proto3" json:"allPeerSend,omitempty"`
	// size of worker to worker communication pairs
	PairNum []*WorkerCommunicationSize `protobuf:"bytes,7,rep,name=pairNum" json:"pairNum,omitempty"`
}

func (m *PEvalResponseBody) Reset()                    { *m = PEvalResponseBody{} }
func (m *PEvalResponseBody) String() string            { return proto.CompactTextString(m) }
func (*PEvalResponseBody) ProtoMessage()               {}
func (*PEvalResponseBody) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{4} }

type PEvalResponse struct {
	Ok   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Body *PEvalResponseBody `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *PEvalResponse) Reset()                    { *m = PEvalResponse{} }
func (m *PEvalResponse) String() string            { return proto.CompactTextString(m) }
func (*PEvalResponse) ProtoMessage()               {}
func (*PEvalResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{5} }

type IncEvalRequest struct {
}

func (m *IncEvalRequest) Reset()                    { *m = IncEvalRequest{} }
func (m *IncEvalRequest) String() string            { return proto.CompactTextString(m) }
func (*IncEvalRequest) ProtoMessage()               {}
func (*IncEvalRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{6} }

type IncEvalResponseBody struct {
	// duration time of aggregator
	AggregatorSeconds     float64 `protobuf:"fixed64,1,opt,name=aggregatorSeconds,proto3" json:"aggregatorSeconds,omitempty"`
	AggregatorOriSize     int32   `protobuf:"varint,2,opt,name=aggregatorOriSize,proto3" json:"aggregatorOriSize,omitempty"`
	AggregatorReducedSize int32   `protobuf:"varint,3,opt,name=aggregatorReducedSize,proto3" json:"aggregatorReducedSize,omitempty"`
	IterationNum          int32   `protobuf:"varint,4,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
	// duration time of partial SSSP loop
	IterationSeconds float64 `protobuf:"fixed64,5,opt,name=iterationSeconds,proto3" json:"iterationSeconds,omitempty"`
	// duration time of combine message
	CombineSeconds float64 `protobuf:"fixed64,6,opt,name=combineSeconds,proto3" json:"combineSeconds,omitempty"`
	// number of updated boarders node pair
	UpdatePairNum int32 `protobuf:"varint,7,opt,name=updatePairNum,proto3" json:"updatePairNum,omitempty"`
	// number of destinations which message send to
	DstPartitionNum int32 `protobuf:"varint,8,opt,name=dstPartitionNum,proto3" json:"dstPartitionNum,omitempty"`
	// duration of a worker send to message to all other workers
	AllPeerSend float64 `protobuf:"fixed64,9,opt,name=allPeerSend,proto3" json:"allPeerSend,omitempty"`
	// size of worker to worker communication pairs
	PairNum []*WorkerCommunicationSize `protobuf:"bytes,10,rep,name=pairNum" json:"pairNum,omitempty"`
}

func (m *IncEvalResponseBody) Reset()                    { *m = IncEvalResponseBody{} }
func (m *IncEvalResponseBody) String() string            { return proto.CompactTextString(m) }
func (*IncEvalResponseBody) ProtoMessage()               {}
func (*IncEvalResponseBody) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{7} }

type IncEvalResponse struct {
	Update bool                 `protobuf:"varint,1,opt,name=update,proto3" json:"update,omitempty"`
	Body   *IncEvalResponseBody `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *IncEvalResponse) Reset()                    { *m = IncEvalResponse{} }
func (m *IncEvalResponse) String() string            { return proto.CompactTextString(m) }
func (*IncEvalResponse) ProtoMessage()               {}
func (*IncEvalResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{8} }

type AssembleRequest struct {
}

func (m *AssembleRequest) Reset()                    { *m = AssembleRequest{} }
func (m *AssembleRequest) String() string            { return proto.CompactTextString(m) }
func (*AssembleRequest) ProtoMessage()               {}
func (*AssembleRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{9} }

type AssembleResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *AssembleResponse) Reset()                    { *m = AssembleResponse{} }
func (m *AssembleResponse) String() string            { return proto.CompactTextString(m) }
func (*AssembleResponse) ProtoMessage()               {}
func (*AssembleResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{10} }

type SSSPMessageRequest struct {
	Pair []*SSSPMessageStruct `protobuf:"bytes,1,rep,name=pair" json:"pair,omitempty"`
}

func (m *SSSPMessageRequest) Reset()                    { *m = SSSPMessageRequest{} }
func (m *SSSPMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SSSPMessageRequest) ProtoMessage()               {}
func (*SSSPMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{11} }

type SSSPMessageStruct struct {
	NodeID   int64 `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Distance int64 `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (m *SSSPMessageStruct) Reset()                    { *m = SSSPMessageStruct{} }
func (m *SSSPMessageStruct) String() string            { return proto.CompactTextString(m) }
func (*SSSPMessageStruct) ProtoMessage()               {}
func (*SSSPMessageStruct) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{12} }

type SSSPMessageResponse struct {
}

func (m *SSSPMessageResponse) Reset()         { *m = SSSPMessageResponse{} }
func (m *SSSPMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SSSPMessageResponse) ProtoMessage()    {}
func (*SSSPMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorWorkerService, []int{13}
}

type SimMessageRequest struct {
	Pair []*SimMessageStruct `protobuf:"bytes,1,rep,name=pair" json:"pair,omitempty"`
}

func (m *SimMessageRequest) Reset()                    { *m = SimMessageRequest{} }
func (m *SimMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SimMessageRequest) ProtoMessage()               {}
func (*SimMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{14} }

type SimMessageResponse struct {
}

func (m *SimMessageResponse) Reset()                    { *m = SimMessageResponse{} }
func (m *SimMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SimMessageResponse) ProtoMessage()               {}
func (*SimMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{15} }

type SimMessageStruct struct {
	PatternId int64 `protobuf:"varint,1,opt,name=patternId,proto3" json:"patternId,omitempty"`
	DataId    int64 `protobuf:"varint,2,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (m *SimMessageStruct) Reset()                    { *m = SimMessageStruct{} }
func (m *SimMessageStruct) String() string            { return proto.CompactTextString(m) }
func (*SimMessageStruct) ProtoMessage()               {}
func (*SimMessageStruct) Descriptor() ([]byte, []int) { return fileDescriptorWorkerService, []int{16} }

func init() {
	proto.RegisterType((*ShutDownRequest)(nil), "protobuf.shutDownRequest")
	proto.RegisterType((*ShutDownResponse)(nil), "protobuf.shutDownResponse")
	proto.RegisterType((*PEvalRequest)(nil), "protobuf.pEvalRequest")
	proto.RegisterType((*WorkerCommunicationSize)(nil), "protobuf.workerCommunicationSize")
	proto.RegisterType((*PEvalResponseBody)(nil), "protobuf.pEvalResponseBody")
	proto.RegisterType((*PEvalResponse)(nil), "protobuf.pEvalResponse")
	proto.RegisterType((*IncEvalRequest)(nil), "protobuf.incEvalRequest")
	proto.RegisterType((*IncEvalResponseBody)(nil), "protobuf.incEvalResponseBody")
	proto.RegisterType((*IncEvalResponse)(nil), "protobuf.incEvalResponse")
	proto.RegisterType((*AssembleRequest)(nil), "protobuf.assembleRequest")
	proto.RegisterType((*AssembleResponse)(nil), "protobuf.assembleResponse")
	proto.RegisterType((*SSSPMessageRequest)(nil), "protobuf.sSSPMessageRequest")
	proto.RegisterType((*SSSPMessageStruct)(nil), "protobuf.sSSPMessageStruct")
	proto.RegisterType((*SSSPMessageResponse)(nil), "protobuf.sSSPMessageResponse")
	proto.RegisterType((*SimMessageRequest)(nil), "protobuf.simMessageRequest")
	proto.RegisterType((*SimMessageResponse)(nil), "protobuf.simMessageResponse")
	proto.RegisterType((*SimMessageStruct)(nil), "protobuf.simMessageStruct")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Worker service

type WorkerClient interface {
	// service to master
	ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error)
	PEval(ctx context.Context, in *PEvalRequest, opts ...grpc.CallOption) (*PEvalResponse, error)
	IncEval(ctx context.Context, in *IncEvalRequest, opts ...grpc.CallOption) (*IncEvalResponse, error)
	Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error)
	// service to worker
	SSSPSend(ctx context.Context, in *SSSPMessageRequest, opts ...grpc.CallOption) (*SSSPMessageResponse, error)
	SimSend(ctx context.Context, in *SimMessageRequest, opts ...grpc.CallOption) (*SimMessageResponse, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error) {
	out := new(ShutDownResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/ShutDown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) PEval(ctx context.Context, in *PEvalRequest, opts ...grpc.CallOption) (*PEvalResponse, error) {
	out := new(PEvalResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/PEval", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) IncEval(ctx context.Context, in *IncEvalRequest, opts ...grpc.CallOption) (*IncEvalResponse, error) {
	out := new(IncEvalResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/IncEval", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error) {
	out := new(AssembleResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/Assemble", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SSSPSend(ctx context.Context, in *SSSPMessageRequest, opts ...grpc.CallOption) (*SSSPMessageResponse, error) {
	out := new(SSSPMessageResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/SSSPSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SimSend(ctx context.Context, in *SimMessageRequest, opts ...grpc.CallOption) (*SimMessageResponse, error) {
	out := new(SimMessageResponse)
	err := grpc.Invoke(ctx, "/protobuf.Worker/simSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	// service to master
	ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error)
	PEval(context.Context, *PEvalRequest) (*PEvalResponse, error)
	IncEval(context.Context, *IncEvalRequest) (*IncEvalResponse, error)
	Assemble(context.Context, *AssembleRequest) (*AssembleResponse, error)
	// service to worker
	SSSPSend(context.Context, *SSSPMessageRequest) (*SSSPMessageResponse, error)
	SimSend(context.Context, *SimMessageRequest) (*SimMessageResponse, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ShutDown(ctx, req.(*ShutDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_PEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).PEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/PEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).PEval(ctx, req.(*PEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_IncEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).IncEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/IncEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).IncEval(ctx, req.(*IncEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Assemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Assemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/Assemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Assemble(ctx, req.(*AssembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SSSPSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSSPMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SSSPSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/SSSPSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SSSPSend(ctx, req.(*SSSPMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SimSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SimSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/SimSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SimSend(ctx, req.(*SimMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShutDown",
			Handler:    _Worker_ShutDown_Handler,
		},
		{
			MethodName: "PEval",
			Handler:    _Worker_PEval_Handler,
		},
		{
			MethodName: "IncEval",
			Handler:    _Worker_IncEval_Handler,
		},
		{
			MethodName: "Assemble",
			Handler:    _Worker_Assemble_Handler,
		},
		{
			MethodName: "SSSPSend",
			Handler:    _Worker_SSSPSend_Handler,
		},
		{
			MethodName: "simSend",
			Handler:    _Worker_SimSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_service.proto",
}

func (m *ShutDownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutDownRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShutDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutDownResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IterationNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.IterationNum))
	}
	return i, nil
}

func (m *PEvalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PEvalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WorkerCommunicationSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerCommunicationSize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.WorkerID))
	}
	if m.CommunicationSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.CommunicationSize))
	}
	return i, nil
}

func (m *PEvalResponseBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PEvalResponseBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IterationNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IterationSeconds))))
		i += 8
	}
	if m.CombineSeconds != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CombineSeconds))))
		i += 8
	}
	if m.UpdatePairNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AllPeerSend))))
		i += 8
	}
	if len(m.PairNum) > 0 {
		for _, msg := range m.PairNum {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintWorkerService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PEvalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PEvalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.Body.Size()))
		n1, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IncEvalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncEvalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *IncEvalResponseBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncEvalResponseBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregatorSeconds != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AggregatorSeconds))))
		i += 8
	}
	if m.AggregatorOriSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.AggregatorOriSize))
	}
	if m.AggregatorReducedSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.AggregatorReducedSize))
	}
	if m.IterationNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IterationSeconds))))
		i += 8
	}
	if m.CombineSeconds != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CombineSeconds))))
		i += 8
	}
	if m.UpdatePairNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AllPeerSend))))
		i += 8
	}
	if len(m.PairNum) > 0 {
		for _, msg := range m.PairNum {
			dAtA[i] = 0x52
			i++
			i = encodeVarintWorkerService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IncEvalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncEvalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Update {
		dAtA[i] = 0x8
		i++
		if m.Update {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.Body.Size()))
		n2, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AssembleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssembleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AssembleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssembleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SSSPMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, msg := range m.Pair {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkerService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SSSPMessageStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.NodeID))
	}
	if m.Distance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.Distance))
	}
	return i, nil
}

func (m *SSSPMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SimMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, msg := range m.Pair {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkerService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SimMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SimMessageStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PatternId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.PatternId))
	}
	if m.DataId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerService(dAtA, i, uint64(m.DataId))
	}
	return i, nil
}

func encodeVarintWorkerService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShutDownRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ShutDownResponse) Size() (n int) {
	var l int
	_ = l
	if m.IterationNum != 0 {
		n += 1 + sovWorkerService(uint64(m.IterationNum))
	}
	return n
}

func (m *PEvalRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WorkerCommunicationSize) Size() (n int) {
	var l int
	_ = l
	if m.WorkerID != 0 {
		n += 1 + sovWorkerService(uint64(m.WorkerID))
	}
	if m.CommunicationSize != 0 {
		n += 1 + sovWorkerService(uint64(m.CommunicationSize))
	}
	return n
}

func (m *PEvalResponseBody) Size() (n int) {
	var l int
	_ = l
	if m.IterationNum != 0 {
		n += 1 + sovWorkerService(uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		n += 9
	}
	if m.CombineSeconds != 0 {
		n += 9
	}
	if m.UpdatePairNum != 0 {
		n += 1 + sovWorkerService(uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		n += 1 + sovWorkerService(uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		n += 9
	}
	if len(m.PairNum) > 0 {
		for _, e := range m.PairNum {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	return n
}

func (m *PEvalResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovWorkerService(uint64(l))
	}
	return n
}

func (m *IncEvalRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *IncEvalResponseBody) Size() (n int) {
	var l int
	_ = l
	if m.AggregatorSeconds != 0 {
		n += 9
	}
	if m.AggregatorOriSize != 0 {
		n += 1 + sovWorkerService(uint64(m.AggregatorOriSize))
	}
	if m.AggregatorReducedSize != 0 {
		n += 1 + sovWorkerService(uint64(m.AggregatorReducedSize))
	}
	if m.IterationNum != 0 {
		n += 1 + sovWorkerService(uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		n += 9
	}
	if m.CombineSeconds != 0 {
		n += 9
	}
	if m.UpdatePairNum != 0 {
		n += 1 + sovWorkerService(uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		n += 1 + sovWorkerService(uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		n += 9
	}
	if len(m.PairNum) > 0 {
		for _, e := range m.PairNum {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	return n
}

func (m *IncEvalResponse) Size() (n int) {
	var l int
	_ = l
	if m.Update {
		n += 2
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovWorkerService(uint64(l))
	}
	return n
}

func (m *AssembleRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AssembleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *SSSPMessageRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, e := range m.Pair {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	return n
}

func (m *SSSPMessageStruct) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovWorkerService(uint64(m.NodeID))
	}
	if m.Distance != 0 {
		n += 1 + sovWorkerService(uint64(m.Distance))
	}
	return n
}

func (m *SSSPMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SimMessageRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, e := range m.Pair {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	return n
}

func (m *SimMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SimMessageStruct) Size() (n int) {
	var l int
	_ = l
	if m.PatternId != 0 {
		n += 1 + sovWorkerService(uint64(m.PatternId))
	}
	if m.DataId != 0 {
		n += 1 + sovWorkerService(uint64(m.DataId))
	}
	return n
}

func sovWorkerService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkerService(x uint64) (n int) {
	return sovWorkerService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShutDownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: shutDownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: shutDownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: shutDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: shutDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PEvalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pEvalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pEvalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerCommunicationSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: workerCommunicationSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: workerCommunicationSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			m.WorkerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationSize", wireType)
			}
			m.CommunicationSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PEvalResponseBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pEvalResponseBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pEvalResponseBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IterationSeconds = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CombineSeconds = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePairNum", wireType)
			}
			m.UpdatePairNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatePairNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPartitionNum", wireType)
			}
			m.DstPartitionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPartitionNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPeerSend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AllPeerSend = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairNum = append(m.PairNum, &WorkerCommunicationSize{})
			if err := m.PairNum[len(m.PairNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PEvalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pEvalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pEvalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &PEvalResponseBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncEvalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incEvalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incEvalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncEvalResponseBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incEvalResponseBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incEvalResponseBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AggregatorSeconds = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorOriSize", wireType)
			}
			m.AggregatorOriSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorOriSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorReducedSize", wireType)
			}
			m.AggregatorReducedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorReducedSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IterationSeconds = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CombineSeconds = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePairNum", wireType)
			}
			m.UpdatePairNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatePairNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPartitionNum", wireType)
			}
			m.DstPartitionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPartitionNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPeerSend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AllPeerSend = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairNum = append(m.PairNum, &WorkerCommunicationSize{})
			if err := m.PairNum[len(m.PairNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncEvalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incEvalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incEvalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Update = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &IncEvalResponseBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssembleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assembleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assembleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssembleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assembleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assembleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = append(m.Pair, &SSSPMessageStruct{})
			if err := m.Pair[len(m.Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = append(m.Pair, &SimMessageStruct{})
			if err := m.Pair[len(m.Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatternId", wireType)
			}
			m.PatternId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatternId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkerService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorkerService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkerService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkerService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkerService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkerService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("worker_service.proto", fileDescriptorWorkerService) }

var fileDescriptorWorkerService = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x95, 0xc9, 0x6e, 0xd3, 0x40,
	0x18, 0xc7, 0xe3, 0xa4, 0x59, 0xfa, 0xb5, 0xcd, 0x32, 0xdd, 0xd2, 0xb4, 0x8d, 0xca, 0x08, 0xa1,
	0x0a, 0x95, 0x54, 0x14, 0xc4, 0x01, 0x2e, 0xd0, 0x05, 0xc8, 0x01, 0x88, 0xec, 0x03, 0x17, 0x24,
	0xe4, 0xd8, 0x83, 0x6b, 0x35, 0xf6, 0x04, 0xcf, 0xb8, 0x55, 0x79, 0x12, 0xee, 0xbc, 0x05, 0x4f,
	0xd0, 0x13, 0xe2, 0x11, 0xa0, 0xbc, 0x08, 0xf2, 0x78, 0x9c, 0x78, 0x0b, 0x0a, 0xa7, 0xf6, 0xdb,
	0xff, 0xdf, 0xcc, 0x2f, 0x63, 0x58, 0xbb, 0xa2, 0xde, 0x05, 0xf1, 0x3e, 0x32, 0xe2, 0x5d, 0xda,
	0x06, 0xe9, 0x8d, 0x3d, 0xca, 0x29, 0xaa, 0x89, 0x3f, 0x43, 0xff, 0x53, 0xe7, 0x81, 0x65, 0xf3,
	0x73, 0x7f, 0xd8, 0x33, 0xa8, 0x73, 0x68, 0x51, 0x8b, 0x1e, 0x46, 0x11, 0x61, 0x09, 0x43, 0xfc,
	0x17, 0x16, 0xe2, 0x16, 0x34, 0xd8, 0xb9, 0xcf, 0x4f, 0xe9, 0x95, 0xab, 0x92, 0xcf, 0x3e, 0x61,
	0x1c, 0x3f, 0x81, 0xe6, 0xd4, 0xc5, 0xc6, 0xd4, 0x65, 0x04, 0x61, 0x58, 0xb6, 0x39, 0xf1, 0x74,
	0x6e, 0x53, 0xf7, 0xad, 0xef, 0xb4, 0x95, 0x3d, 0x65, 0xbf, 0xac, 0x26, 0x7c, 0xb8, 0x0e, 0xcb,
	0xe3, 0xb3, 0x4b, 0x7d, 0x14, 0xf5, 0x31, 0x60, 0x33, 0xd4, 0x7a, 0x42, 0x1d, 0xc7, 0x77, 0x6d,
	0x43, 0x64, 0x6a, 0xf6, 0x17, 0x82, 0x3a, 0x50, 0x0b, 0x43, 0xfd, 0x53, 0xd9, 0x6a, 0x62, 0xa3,
	0x03, 0x68, 0x19, 0xe9, 0x82, 0x76, 0x51, 0x24, 0x65, 0x03, 0xf8, 0x7b, 0x11, 0x5a, 0x72, 0x6a,
	0x28, 0xf5, 0x98, 0x9a, 0xd7, 0xf3, 0xc8, 0x45, 0xf7, 0xa1, 0x39, 0xb1, 0x35, 0x62, 0x50, 0xd7,
	0x64, 0x62, 0x8c, 0xa2, 0x66, 0xfc, 0xe8, 0x1e, 0xd4, 0x0d, 0xea, 0x0c, 0x6d, 0x97, 0x44, 0x99,
	0x25, 0x91, 0x99, 0xf2, 0xa2, 0xbb, 0xb0, 0xe2, 0x8f, 0x4d, 0x9d, 0x93, 0x81, 0x6e, 0x7b, 0xc1,
	0xe0, 0x05, 0x31, 0x38, 0xe9, 0x44, 0xfb, 0xd0, 0x30, 0x19, 0x1f, 0xe8, 0x1e, 0xb7, 0x23, 0x81,
	0x65, 0x91, 0x97, 0x76, 0xa3, 0x3d, 0x58, 0xd2, 0x47, 0xa3, 0x01, 0x21, 0x9e, 0x46, 0x5c, 0xb3,
	0x5d, 0x11, 0x43, 0xe3, 0x2e, 0xf4, 0x0c, 0xaa, 0x63, 0x39, 0xab, 0xba, 0x57, 0xda, 0x5f, 0x3a,
	0xba, 0xd3, 0x8b, 0x2e, 0xbc, 0x37, 0xe3, 0xf4, 0xd5, 0xa8, 0x02, 0x0f, 0x60, 0x25, 0x71, 0x76,
	0xa8, 0x0e, 0x45, 0x7a, 0x21, 0x4e, 0xab, 0xa6, 0x16, 0xe9, 0x05, 0x3a, 0x84, 0x85, 0x21, 0x35,
	0xaf, 0xc5, 0xb9, 0x2c, 0x1d, 0x6d, 0x4f, 0x5b, 0x67, 0x8e, 0x5c, 0x15, 0x89, 0xb8, 0x09, 0x75,
	0xdb, 0x35, 0xe2, 0x14, 0xfc, 0x28, 0xc1, 0xea, 0xc4, 0x15, 0xbb, 0xa2, 0x03, 0x68, 0xe9, 0x96,
	0xe5, 0x11, 0x4b, 0xe7, 0xd4, 0x8b, 0x4e, 0x55, 0x11, 0x0b, 0x66, 0x03, 0xc9, 0xec, 0x77, 0x9e,
	0x1d, 0x87, 0x22, 0x13, 0x40, 0x8f, 0x61, 0x7d, 0xea, 0x54, 0x89, 0xe9, 0x1b, 0xc4, 0x14, 0x15,
	0x25, 0x51, 0x91, 0x1f, 0xcc, 0x40, 0xb3, 0x30, 0x27, 0x34, 0xe5, 0xb9, 0xa1, 0xa9, 0xcc, 0x07,
	0x4d, 0x75, 0x4e, 0x68, 0x6a, 0x73, 0x41, 0xb3, 0xf8, 0x4f, 0x68, 0xe0, 0xbf, 0xa1, 0xf9, 0x00,
	0x8d, 0xd4, 0x7d, 0xa2, 0x0d, 0xa8, 0x84, 0x62, 0x25, 0x3a, 0xd2, 0x42, 0x0f, 0x13, 0xf8, 0xec,
	0x4e, 0x87, 0xe4, 0x00, 0x21, 0x01, 0x6a, 0x41, 0x43, 0x67, 0x8c, 0x38, 0xc3, 0x11, 0x89, 0x08,
	0xc2, 0xd0, 0x9c, 0xba, 0xf2, 0x41, 0xc5, 0x67, 0x80, 0x98, 0xa6, 0x0d, 0xde, 0x10, 0xc6, 0x74,
	0x2b, 0xaa, 0x0c, 0xf0, 0x0d, 0x54, 0xb7, 0x15, 0xb1, 0x64, 0x0c, 0xdf, 0x58, 0xae, 0xc6, 0x3d,
	0xdf, 0xe0, 0xaa, 0x48, 0xc4, 0xaf, 0xa0, 0x95, 0x09, 0x05, 0xdb, 0xb9, 0xd4, 0x24, 0xf2, 0xa9,
	0x2a, 0xa9, 0xd2, 0x0a, 0x1e, 0x31, 0xd3, 0x66, 0x5c, 0x77, 0x8d, 0x10, 0xc5, 0x92, 0x3a, 0xb1,
	0xf1, 0x3a, 0xac, 0x26, 0xf4, 0x84, 0xb2, 0xf1, 0x09, 0xb4, 0x98, 0xed, 0xa4, 0x54, 0xf6, 0x12,
	0x2a, 0x3b, 0x31, 0x95, 0x93, 0xd4, 0x84, 0xc8, 0x35, 0x40, 0xf1, 0x26, 0xb2, 0xf5, 0x6b, 0x68,
	0xa6, 0xf3, 0xd1, 0x0e, 0x2c, 0x8e, 0x75, 0xce, 0x89, 0xe7, 0xf6, 0x4d, 0x29, 0x7e, 0xea, 0x08,
	0xf6, 0x32, 0x75, 0xae, 0xf7, 0x4d, 0xa9, 0x5e, 0x5a, 0x47, 0xdf, 0x4a, 0x50, 0x79, 0x2f, 0x28,
	0x40, 0x27, 0x50, 0xd3, 0xe4, 0xa7, 0x00, 0x6d, 0xc5, 0x84, 0x25, 0xbf, 0x18, 0x9d, 0x4e, 0x5e,
	0x48, 0xea, 0x2a, 0xa0, 0xa7, 0x50, 0x1e, 0x04, 0xb7, 0x8d, 0x36, 0x32, 0xef, 0x47, 0x58, 0xbe,
	0x39, 0xe3, 0x5d, 0xc1, 0x05, 0xf4, 0x1c, 0xaa, 0xfd, 0x90, 0x15, 0xd4, 0xce, 0xc1, 0x27, 0xac,
	0xdf, 0x9a, 0x09, 0x16, 0x2e, 0x04, 0x2b, 0xbc, 0x90, 0xf4, 0xc4, 0x57, 0x48, 0x41, 0x16, 0x5f,
	0x21, 0x0d, 0x1b, 0x2e, 0xa0, 0x3e, 0xd4, 0x34, 0x4d, 0x1b, 0x88, 0x1f, 0xcf, 0x4e, 0x2e, 0x46,
	0x51, 0x9f, 0xdd, 0x19, 0xd1, 0x49, 0xab, 0x97, 0x50, 0x65, 0xb6, 0x23, 0x3a, 0x6d, 0xe7, 0x5d,
	0x75, 0xd4, 0x68, 0x27, 0x3f, 0x18, 0xf5, 0x39, 0x5e, 0xbb, 0xf9, 0xdd, 0x2d, 0xdc, 0xdc, 0x76,
	0x95, 0x9f, 0xb7, 0x5d, 0xe5, 0xd7, 0x6d, 0x57, 0xf9, 0xfa, 0xa7, 0x5b, 0x18, 0x56, 0x44, 0xd1,
	0xa3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x85, 0xe6, 0x61, 0x26, 0x08, 0x00, 0x00,
}
