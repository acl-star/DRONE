// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: master_service.proto

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		master_service.proto
		worker_service.proto

	It has these top-level messages:
		RegisterRequest
		RegisterResponse
		FinishRequest
		WorkerCommunicationSize
		FinishResponse
		ShutDownRequest
		ShutDownResponse
		PEvalRequest
		PEvalResponse
		IncEvalRequest
		IncEvalResponse
		AssembleRequest
		AssembleResponse
		SSSPMessageRequest
		SSSPMessageStruct
		SSSPMessageResponse
		SimMessageRequest
		SimMessageResponse
		SimMessageStruct
		PRMessageRequest
		PRMessageResponse
		PRMessageStruct
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	WorkerIndex int32 `protobuf:"varint,1,opt,name=workerIndex,proto3" json:"workerIndex,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorMasterService, []int{0} }

type RegisterResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorMasterService, []int{1} }

type FinishRequest struct {
	// duration time of aggregator
	AggregatorSeconds     float64 `protobuf:"fixed64,1,opt,name=aggregatorSeconds,proto3" json:"aggregatorSeconds,omitempty"`
	AggregatorOriSize     int32   `protobuf:"varint,2,opt,name=aggregatorOriSize,proto3" json:"aggregatorOriSize,omitempty"`
	AggregatorReducedSize int32   `protobuf:"varint,3,opt,name=aggregatorReducedSize,proto3" json:"aggregatorReducedSize,omitempty"`
	IterationNum          int64   `protobuf:"varint,4,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
	// duration time of partial SSSP loop
	IterationSeconds float64 `protobuf:"fixed64,5,opt,name=iterationSeconds,proto3" json:"iterationSeconds,omitempty"`
	// duration time of combine message
	CombineSeconds float64 `protobuf:"fixed64,6,opt,name=combineSeconds,proto3" json:"combineSeconds,omitempty"`
	// number of updated boarders node pair
	UpdatePairNum int32 `protobuf:"varint,7,opt,name=updatePairNum,proto3" json:"updatePairNum,omitempty"`
	// number of destinations which message send to
	DstPartitionNum int32 `protobuf:"varint,8,opt,name=dstPartitionNum,proto3" json:"dstPartitionNum,omitempty"`
	// duration of a worker send to message to all other workers
	AllPeerSend float64 `protobuf:"fixed64,9,opt,name=allPeerSend,proto3" json:"allPeerSend,omitempty"`
	// size of worker to worker communication pairs
	PairNum       []*WorkerCommunicationSize `protobuf:"bytes,10,rep,name=pairNum" json:"pairNum,omitempty"`
	WorkerID      int32                      `protobuf:"varint,11,opt,name=workerID,proto3" json:"workerID,omitempty"`
	MessageToSend bool                       `protobuf:"varint,12,opt,name=MessageToSend,proto3" json:"MessageToSend,omitempty"`
}

func (m *FinishRequest) Reset()                    { *m = FinishRequest{} }
func (m *FinishRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishRequest) ProtoMessage()               {}
func (*FinishRequest) Descriptor() ([]byte, []int) { return fileDescriptorMasterService, []int{2} }

type WorkerCommunicationSize struct {
	WorkerID          int32 `protobuf:"varint,1,opt,name=workerID,proto3" json:"workerID,omitempty"`
	CommunicationSize int32 `protobuf:"varint,2,opt,name=communicationSize,proto3" json:"communicationSize,omitempty"`
}

func (m *WorkerCommunicationSize) Reset()         { *m = WorkerCommunicationSize{} }
func (m *WorkerCommunicationSize) String() string { return proto.CompactTextString(m) }
func (*WorkerCommunicationSize) ProtoMessage()    {}
func (*WorkerCommunicationSize) Descriptor() ([]byte, []int) {
	return fileDescriptorMasterService, []int{3}
}

type FinishResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *FinishResponse) Reset()                    { *m = FinishResponse{} }
func (m *FinishResponse) String() string            { return proto.CompactTextString(m) }
func (*FinishResponse) ProtoMessage()               {}
func (*FinishResponse) Descriptor() ([]byte, []int) { return fileDescriptorMasterService, []int{4} }

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "protobuf.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "protobuf.RegisterResponse")
	proto.RegisterType((*FinishRequest)(nil), "protobuf.FinishRequest")
	proto.RegisterType((*WorkerCommunicationSize)(nil), "protobuf.workerCommunicationSize")
	proto.RegisterType((*FinishResponse)(nil), "protobuf.FinishResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SuperStepFinish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/protobuf.Master/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) SuperStepFinish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error) {
	out := new(FinishResponse)
	err := grpc.Invoke(ctx, "/protobuf.Master/SuperStepFinish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SuperStepFinish(context.Context, *FinishRequest) (*FinishResponse, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Master/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_SuperStepFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).SuperStepFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Master/SuperStepFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).SuperStepFinish(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
		{
			MethodName: "SuperStepFinish",
			Handler:    _Master_SuperStepFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerIndex))
	}
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregatorSeconds != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AggregatorSeconds))))
		i += 8
	}
	if m.AggregatorOriSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.AggregatorOriSize))
	}
	if m.AggregatorReducedSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.AggregatorReducedSize))
	}
	if m.IterationNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IterationSeconds))))
		i += 8
	}
	if m.CombineSeconds != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CombineSeconds))))
		i += 8
	}
	if m.UpdatePairNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AllPeerSend))))
		i += 8
	}
	if len(m.PairNum) > 0 {
		for _, msg := range m.PairNum {
			dAtA[i] = 0x52
			i++
			i = encodeVarintMasterService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WorkerID != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerID))
	}
	if m.MessageToSend {
		dAtA[i] = 0x60
		i++
		if m.MessageToSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WorkerCommunicationSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerCommunicationSize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerID))
	}
	if m.CommunicationSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMasterService(dAtA, i, uint64(m.CommunicationSize))
	}
	return i, nil
}

func (m *FinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintMasterService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	if m.WorkerIndex != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerIndex))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *FinishRequest) Size() (n int) {
	var l int
	_ = l
	if m.AggregatorSeconds != 0 {
		n += 9
	}
	if m.AggregatorOriSize != 0 {
		n += 1 + sovMasterService(uint64(m.AggregatorOriSize))
	}
	if m.AggregatorReducedSize != 0 {
		n += 1 + sovMasterService(uint64(m.AggregatorReducedSize))
	}
	if m.IterationNum != 0 {
		n += 1 + sovMasterService(uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		n += 9
	}
	if m.CombineSeconds != 0 {
		n += 9
	}
	if m.UpdatePairNum != 0 {
		n += 1 + sovMasterService(uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		n += 1 + sovMasterService(uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		n += 9
	}
	if len(m.PairNum) > 0 {
		for _, e := range m.PairNum {
			l = e.Size()
			n += 1 + l + sovMasterService(uint64(l))
		}
	}
	if m.WorkerID != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerID))
	}
	if m.MessageToSend {
		n += 2
	}
	return n
}

func (m *WorkerCommunicationSize) Size() (n int) {
	var l int
	_ = l
	if m.WorkerID != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerID))
	}
	if m.CommunicationSize != 0 {
		n += 1 + sovMasterService(uint64(m.CommunicationSize))
	}
	return n
}

func (m *FinishResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func sovMasterService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMasterService(x uint64) (n int) {
	return sovMasterService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerIndex", wireType)
			}
			m.WorkerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AggregatorSeconds = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorOriSize", wireType)
			}
			m.AggregatorOriSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorOriSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorReducedSize", wireType)
			}
			m.AggregatorReducedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorReducedSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IterationSeconds = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CombineSeconds = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePairNum", wireType)
			}
			m.UpdatePairNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatePairNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPartitionNum", wireType)
			}
			m.DstPartitionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPartitionNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPeerSend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AllPeerSend = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMasterService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairNum = append(m.PairNum, &WorkerCommunicationSize{})
			if err := m.PairNum[len(m.PairNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			m.WorkerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageToSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageToSend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerCommunicationSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: workerCommunicationSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: workerCommunicationSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			m.WorkerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationSize", wireType)
			}
			m.CommunicationSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMasterService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMasterService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMasterService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMasterService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMasterService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMasterService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("master_service.proto", fileDescriptorMasterService) }

var fileDescriptorMasterService = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x8d, 0x93, 0x36, 0xcd, 0x37, 0x69, 0x93, 0x76, 0xd5, 0x4f, 0x35, 0x3e, 0x58, 0xc6, 0x42,
	0x28, 0x42, 0x25, 0x95, 0x5a, 0x6e, 0xdc, 0x28, 0xaa, 0xc4, 0xa1, 0x10, 0xd9, 0xdc, 0x91, 0x63,
	0x0f, 0xee, 0x2a, 0xb5, 0xd7, 0xec, 0xae, 0x01, 0xf5, 0x27, 0x70, 0x47, 0xe2, 0x27, 0xf5, 0xc8,
	0x4f, 0x80, 0xf0, 0x47, 0x50, 0xc6, 0xdd, 0xa6, 0xb6, 0xc3, 0x29, 0x99, 0xf7, 0xe6, 0xcd, 0xbc,
	0xf5, 0xbe, 0x85, 0xc3, 0x2c, 0x52, 0x1a, 0xe5, 0x07, 0x85, 0xf2, 0x33, 0x8f, 0x71, 0x5a, 0x48,
	0xa1, 0x05, 0x1b, 0xd0, 0xcf, 0xbc, 0xfc, 0xe8, 0x3c, 0x4f, 0xb9, 0xbe, 0x2a, 0xe7, 0xd3, 0x58,
	0x64, 0x27, 0xa9, 0x48, 0xc5, 0x89, 0x61, 0xa8, 0xa2, 0x82, 0xfe, 0x55, 0x42, 0xff, 0x0c, 0xc6,
	0x01, 0xa6, 0x7c, 0x35, 0x32, 0xc0, 0x4f, 0x25, 0x2a, 0xcd, 0x3c, 0x18, 0x7e, 0x11, 0x72, 0x81,
	0xf2, 0x4d, 0x9e, 0xe0, 0x57, 0xdb, 0xf2, 0xac, 0xc9, 0x76, 0xf0, 0x10, 0xf2, 0x7d, 0xd8, 0x5f,
	0x8b, 0x54, 0x21, 0x72, 0x85, 0x6c, 0x04, 0x5d, 0xb1, 0xa0, 0xe6, 0x41, 0xd0, 0x15, 0x0b, 0xff,
	0xdb, 0x16, 0xec, 0x5d, 0xf0, 0x9c, 0xab, 0x2b, 0x33, 0xf7, 0x18, 0x0e, 0xa2, 0x34, 0x95, 0x98,
	0x46, 0x5a, 0xc8, 0x10, 0x63, 0x91, 0x27, 0x8a, 0x04, 0x56, 0xd0, 0x26, 0xea, 0xdd, 0xef, 0x24,
	0x0f, 0xf9, 0x0d, 0xda, 0x5d, 0xf2, 0xd2, 0x26, 0xd8, 0x0b, 0xf8, 0x7f, 0x0d, 0x06, 0x98, 0x94,
	0x31, 0x26, 0xa4, 0xe8, 0x91, 0x62, 0x33, 0xc9, 0x7c, 0xd8, 0xe5, 0x1a, 0x65, 0xa4, 0xb9, 0xc8,
	0xdf, 0x96, 0x99, 0xbd, 0xe5, 0x59, 0x93, 0x5e, 0x50, 0xc3, 0xd8, 0x33, 0xd8, 0xbf, 0xaf, 0x8d,
	0xe9, 0x6d, 0x32, 0xdd, 0xc2, 0xd9, 0x53, 0x18, 0xc5, 0x22, 0x9b, 0xf3, 0x1c, 0x4d, 0x67, 0x9f,
	0x3a, 0x1b, 0x28, 0x7b, 0x02, 0x7b, 0x65, 0x91, 0x44, 0x1a, 0x67, 0x11, 0x97, 0xab, 0xc5, 0x3b,
	0xe4, 0xb2, 0x0e, 0xb2, 0x09, 0x8c, 0x13, 0xa5, 0x67, 0x91, 0xd4, 0xdc, 0x18, 0x1c, 0x50, 0x5f,
	0x13, 0x5e, 0xdd, 0x58, 0x74, 0x7d, 0x3d, 0x43, 0x94, 0x21, 0xe6, 0x89, 0xfd, 0x1f, 0x2d, 0x7d,
	0x08, 0xb1, 0x97, 0xb0, 0x53, 0xdc, 0xed, 0x02, 0xaf, 0x37, 0x19, 0x9e, 0x3e, 0x9e, 0x9a, 0x5c,
	0x4c, 0xab, 0x9b, 0x3d, 0x17, 0x59, 0x56, 0xe6, 0x3c, 0xae, 0x0e, 0xc4, 0x6f, 0x30, 0x30, 0x0a,
	0xe6, 0xc0, 0xe0, 0xee, 0xf6, 0x5f, 0xdb, 0x43, 0x72, 0x70, 0x5f, 0xaf, 0x8e, 0x72, 0x89, 0x4a,
	0x45, 0x29, 0xbe, 0x17, 0xb4, 0x7c, 0x97, 0x12, 0x50, 0x07, 0xfd, 0x18, 0x8e, 0xfe, 0xb1, 0xa5,
	0x36, 0xdc, 0x6a, 0x0c, 0x3f, 0x86, 0x83, 0xb8, 0x29, 0x30, 0x19, 0x68, 0x11, 0xbe, 0x07, 0x23,
	0x13, 0xb8, 0xcd, 0x99, 0x3c, 0xfd, 0x6e, 0x41, 0xff, 0x92, 0x9e, 0x0f, 0x3b, 0x87, 0x81, 0x89,
	0x30, 0x7b, 0xb4, 0xfe, 0x16, 0x8d, 0xb7, 0xe0, 0x38, 0x9b, 0xa8, 0x6a, 0xba, 0xdf, 0x61, 0x17,
	0x30, 0x0e, 0xcb, 0x02, 0x65, 0xa8, 0xb1, 0xa8, 0x56, 0xb3, 0xa3, 0xb5, 0xa0, 0x96, 0x7e, 0xc7,
	0x6e, 0x13, 0x66, 0xce, 0xab, 0xc3, 0xdb, 0xdf, 0x6e, 0xe7, 0x76, 0xe9, 0x5a, 0x3f, 0x97, 0xae,
	0xf5, 0x6b, 0xe9, 0x5a, 0x3f, 0xfe, 0xb8, 0x9d, 0x79, 0x9f, 0x04, 0x67, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x19, 0xa9, 0x6f, 0x57, 0xf2, 0x03, 0x00, 0x00,
}
